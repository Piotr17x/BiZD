/*7*/

CREATE TABLE simulation_vs_stats(
ids NUMBER GENERATED by default on null as IDENTITY,
primary_parameter VARCHAR2(50),
secondary_parameter VARCHAR2(50),
wins number,
loses number,
draws number,
winrate number
);

CREATE TABLE simulation_turn_stats(
ids NUMBER GENERATED by default on null as IDENTITY,
parameter VARCHAR2(50),
turn_cnt number,
wins number,
loses number,
draws number,
winrate number
);


INSERT INTO simulation_vs_stats (primary_parameter) values ('draw');
INSERT INTO simulation_turn_stats (parameter) values ('draw');


CREATE OR REPLACE PROCEDURE insert_vs_stats(
player parameters.parameter_id%TYPE
) as
TYPE var_array IS VARRAY (10) OF simulation_vs_stats.primary_parameter%type;
opponents var_array;
parameter_not_found exception;
player_exists number;
BEGIN
    select count(parameter_id) into player_exists from parameters where parameter_id=player;
    if player_exists != 1 then
        raise parameter_not_found;
    end if;
    
    delete from simulation_vs_stats where primary_parameter = player;
    commit;
    
    select distinct(outcome) BULK COLLECT into opponents from simulations where red_player=player and outcome != 'draw' or blue_player=player and outcome != 'draw';
    
    FOR i IN 1..opponents.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE(opponents(i));
        if opponents(i) = player then
         continue;
        end if;
        insert into simulation_vs_stats (primary_parameter, secondary_parameter, wins, loses, draws, winrate)
        values (
        player,
        opponents(i),
        (SELECT count(sim_id) from simulations
        where 
        red_player=opponents(i) and blue_player=player
        and outcome=player
        or blue_player=opponents(i) and red_player=player
        and outcome=player),
        (SELECT count(sim_id) from simulations
        where 
        red_player=opponents(i) and blue_player=player
        and outcome=opponents(i)
        or blue_player=opponents(i) and red_player=player
        and outcome=opponents(i)),
        (SELECT count(sim_id) from simulations
        where 
        red_player=opponents(i) and blue_player=player
        and outcome='draw'
        or blue_player=opponents(i) and red_player=player
        and outcome='draw'),
        get_winrate(player,opponents(i))
        );
    END LOOP;
EXCEPTION
    WHEN parameter_not_found THEN
        DBMS_OUTPUT.PUT_LINE('Podana nazwa parametru nie istnieje.');
END;

begin
    insert_vs_stats('MCTS_BB_2_0_n_3');
end;
