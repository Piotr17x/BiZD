DECLARE
   TYPE department IS TABLE OF departments%ROWTYPE INDEX BY PLS_INTEGER; 
   dep_list department; 
BEGIN
    for i in 1..10
    LOOP
        select * into dep_list(i) from departments where department_id=i*10; 
        dbms_output.put_line('Department name: ' || dep_list(i).department_name ||' department id:  '|| dep_list(i).department_id ||' manager id: '|| dep_list(i).manager_id);
    end loop;
end;


DECLARE
    CURSOR c is select salary, last_name from employees where department_id=50;
begin
    for e in c loop
        if e.salary > 3100 then
            dbms_output.put_line(e.last_name||' nie dawać podwyżki');
        else
            dbms_output.put_line(e.last_name||' dać podwyżkę');
        end if;
    end loop;
end;


Declare 
    cursor c(od number, do1 number, litera varchar) is select salary, first_name, last_name from employees where salary between od and do1 and first_name like '%'||litera||'%';
begin
    dbms_output.put_line('1000-5000 a');
    for e in c(1000,5000,'a') loop
        dbms_output.put_line(e.first_name ||' ' || e.last_name);
    end loop;
    dbms_output.put_line('5000-20000 u');
    for e in c(5000,20000,'u') loop
        dbms_output.put_line(e.first_name ||' ' || e.last_name);
    end loop;
end;


Create or replace Procedure add_jobs(job_id varchar, job_title varchar) as
begin
    insert into jobs (job_id,job_title) values(job_id, job_title);
EXCEPTION
   WHEN OTHERS THEN
      dbms_output.put_line( SQLERRM );
END add_jobs;

execute add_jobs('tch', 'teacher');


Create or replace Procedure mod_jobs(job_idd varchar, job_titlee varchar)  as
begin
    update jobs set job_title=job_titlee where job_id=job_idd;
    IF SQL%NOTFOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'No Jobs updated');
    END IF;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Zmodyfikowano nazwę dla id = ' || job_idd);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Błąd przy modyfikacji jobs');
END mod_jobs;

execute mod_jobs('t3ch', 'teacherer');


Create or replace Procedure del_jobs(job_idd varchar)  as
exp exception;
begin
    delete from jobs where job_id=job_idd;
    IF SQL%NOTFOUND THEN
        raise exp;
    END IF;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Usunięto job dla id = ' || job_idd);
    EXCEPTION
        WHEN exp THEN
            DBMS_OUTPUT.PUT_LINE('No Jobs deleted');
END del_jobs;

execute del_jobs('tch');


Create or replace Procedure get_salary(emp_id number)  as
    zarobki Employees.salary%TYPE;
    nazw Employees.last_name%TYPE;
begin
    select salary, last_name into zarobki, nazw from employees where employee_id=emp_id;
    dbms_output.put_line('Pracownik #'||emp_id||' - '|| nazw ||' $'||zarobki);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Błąd przy wyswietlaniu');
END get_salary;

execute get_salary(100);

begin
declare
seqval number;
begin
    select max(employee_id)+1 into seqval from employees;
    execute immediate('CREATE SEQUENCE emp_id INCREMENT BY 1 START WITH '||seqval||' nocycle cache 20');
end;
end;

Create or replace Procedure create_emp(zarobki number, nazw varchar, mail varchar, jobid varchar)  as
exp exception;
begin
IF zarobki > 20000 THEN
    raise exp;
END IF;
insert into employees (employee_id, salary, last_name, email, hire_date, job_id) VALUES (emp_id.nextval, zarobki, nazw, mail, CURRENT_DATE, jobid);
dbms_output.put_line(' Dodano pracownik z zarobkami $'||zarobki);
commit;
EXCEPTION
    WHEN exp THEN
        DBMS_OUTPUT.PUT_LINE('Zarobki większe niz 20000');
END create_emp;

execute create_emp(200300, 'Kowalski', 'kowalskiu@wp.pl', 'SH_CLERK');