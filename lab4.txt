CREATE OR REPLACE FUNCTION get_job_name(
    jobid jobs.job_id%TYPE
)
return varchar
is
    v_job_name jobs.job_title%TYPE;
begin
    select job_title into v_job_name from jobs where job_id = jobid;
    return v_job_name;
exception
    when NO_DATA_FOUND then
        DBMS_OUTPUT.PUT_LINE('Brak pracy z danym id');
end;


CREATE OR REPLACE FUNCTION get_yearly_salary(
    empid employees.employee_id%TYPE
)
return number
is
    yearly_salary number;
    cpct employees.commission_pct%type;
begin
    select salary, commission_pct into yearly_salary, cpct from employees where employee_id = empid;
    if cpct != null then
        yearly_salary := yearly_salary*12+yearly_salary*cpct;
    else
        yearly_salary := yearly_salary*12;
    end if;
    return yearly_salary;
exception
    when NO_DATA_FOUND then
        DBMS_OUTPUT.PUT_LINE('Brak pracownika z danym id');
end;


CREATE OR REPLACE FUNCTION reformat_number(
    p_numb varchar
)
return varchar
is
    formated_numb varchar(20);
begin
    formated_numb := '(' || substr(p_numb, 1, 3) || ')' || substr(p_numb, 4, 12);
    return formated_numb;
end;


CREATE OR REPLACE FUNCTION cap_str(
    str varchar
)
return varchar
is
    r_str varchar(50);
begin
    r_str := upper(substr(str, 1, 1))||lower(substr(str, 2, length(str)-2))||upper(substr(str, -1, 1));
    return r_str;
end;


CREATE OR REPLACE FUNCTION get_date(
    pesel number
)
return date
is
    r_date date;
    r_pesel varchar(20);
begin
    r_pesel := to_char(pesel);
    r_pesel := substr(r_pesel, 1,2)||'-'||substr(r_pesel, 3,2)||'-'||substr(r_pesel, 5,2);
    if pesel > 24000000000 then
        r_pesel := '19'||r_pesel;
    else
        r_pesel := '20'||r_pesel;
    end if;
    r_date := to_date(r_pesel,'yyyy-MM-DD');
    return r_date;
end;


CREATE OR REPLACE FUNCTION get_data(
    v_country_name varchar
)
return varchar
is  
    country number;
    emp_numb number;
    dep_numb number;
begin
    select count(*) into country from countries where country_name = v_country_name;
    if country = 0 then
        raise NO_DATA_FOUND;
    end if;
    select count(d.department_id) into dep_numb
        from departments d 
        left join locations l on d.location_id = l.location_id 
        left join countries c on c.country_id=l.country_id
        where c.country_name = v_country_name;
    select count(d.department_id) into emp_numb
        from employees e
        left join departments d on e.department_id = d.department_id
        left join locations l on d.location_id = l.location_id 
        left join countries c on c.country_id=l.country_id
        where c.country_name = v_country_name;
    return dep_numb||' i '||emp_numb;
exception
    when NO_DATA_FOUND then
        DBMS_OUTPUT.PUT_LINE('Brak kraju o takiej nazwie');
end;

begin
    DBMS_OUTPUT.PUT_LINE( get_job_name('AD_VP'));
    DBMS_OUTPUT.PUT_LINE( get_yearly_salary(145));
    DBMS_OUTPUT.PUT_LINE( reformat_number('+12111222333'));
    DBMS_OUTPUT.PUT_LINE( cap_str('aSDFg'));
    DBMS_OUTPUT.PUT_LINE( to_char(get_date(22091804656),'yyyy-mm-dd'));
    DBMS_OUTPUT.PUT_LINE( get_data('United States of America'));
end;

CREATE TABLE archiwum_departamentów (ids number, nazwa varchar(50), data_zamknięcia date, ostatni_manager varchar(50));
drop table archiwum_departamentów;
delete from archiwum_departamentów;

insert into departments (department_id, department_name, manager_id) values (2, '213', 102);

Create or replace TRIGGER archive_departments
    after delete
    on departments
    for each row
begin
    insert into archiwum_departamentów (ids, nazwa, data_zamknięcia, ostatni_manager)
    values (:old.department_id, :old.department_name, CURRENT_DATE, (select first_name||' '|| last_name from employees where employee_id = :old.manager_id));
end;
delete from departments where department_id = 2;

--!!!
CREATE TABLE złodziej (ids number GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1), user_ varchar(50), czas_zmiany timestamp);
Create or replace TRIGGER detect_thief
    before insert or update
    on employees
    for each row
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
begin
    if 2000 > :new.salary or :new.salary > 26000 then
        insert into złodziej (user_, czas_zmiany) values ((select user from dual), current_timestamp);
        commit;
        raise_application_error(-20000, 'niepoprawne zarobki');
    end if;
end;
update employees set salary = 28000 where employee_id = 208;


begin
declare
seqval number;
begin
    select max(employee_id)+1 into seqval from employees;
    execute immediate('CREATE SEQUENCE employee_id_seq INCREMENT BY 1 START WITH '||seqval||' nocycle cache 20');
end;
end;


CREATE OR REPLACE TRIGGER employees_id_trigger
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
    SELECT employee_id_seq.NEXTVAL INTO :NEW.employee_id FROM dual;
END;

insert into employees (salary, last_name, email, hire_date, job_id) VALUES (20000, 'Kowalski', 'kowalski@wp.pl', CURRENT_DATE, 'AD_VP');

Create or replace TRIGGER defend_job_grades
    before insert or update or delete
    on job_grades
    for each row

begin
    raise_application_error(-20000, 'Tabela nie jest modyfikowalna');
end;

delete from job_grades where rownum = 1;


CREATE OR REPLACE TRIGGER jobs_salary
BEFORE update ON jobs
FOR EACH ROW
BEGIN
    SELECT :old.min_salary, :old.max_salary INTO :new.min_salary, :new.max_salary FROM dual;
END;

update jobs
    set min_salary = 20,
    max_salary = 202
    where rownum = 1;
    

CREATE OR REPLACE PACKAGE hr_mgmt AS
    FUNCTION get_job_name(
        jobid jobs.job_id%TYPE
    )
    return varchar2;
    FUNCTION get_yearly_salary(
        empid employees.employee_id%TYPE
    )
    return number;
    FUNCTION reformat_number(
        p_numb varchar2
    )
    return varchar2;
    FUNCTION cap_str(
        str varchar2
    )
    return varchar2;
    FUNCTION get_date(
        pesel number
    )
    return date;
    FUNCTION get_data(
        v_country_name varchar2
    )
    return varchar2;
    Procedure get_employee_name(employee_idd employees.employee_id%type);
end hr_mgmt;

CREATE or replace PACKAGE BODY hr_mgmt as
    FUNCTION get_job_name(
        jobid jobs.job_id%TYPE
    )
    return varchar2
    is
        v_job_name jobs.job_title%TYPE;
    begin
        select job_title into v_job_name from jobs where job_id = jobid;
        return v_job_name;
    exception
        when NO_DATA_FOUND then
            DBMS_OUTPUT.PUT_LINE('Brak pracy z danym id');
    end get_job_name;
    
    FUNCTION get_yearly_salary(
    empid employees.employee_id%TYPE
    )
    return number
    is
        yearly_salary number;
        cpct employees.commission_pct%type;
    begin
        select salary, commission_pct into yearly_salary, cpct from employees where employee_id = empid;
        if cpct != null then
            yearly_salary := yearly_salary*12+yearly_salary*cpct;
        else
            yearly_salary := yearly_salary*12;
        end if;
        return yearly_salary;
    exception
        when NO_DATA_FOUND then
            DBMS_OUTPUT.PUT_LINE('Brak pracownika z danym id');
    end get_yearly_salary;
    
    FUNCTION reformat_number(
    p_numb varchar2
    )
    return varchar2
    is
        formated_numb varchar2(20);
    begin
        formated_numb := '(' || substr(p_numb, 1, 3) || ')' || substr(p_numb, 4, 12);
        return formated_numb;
    end reformat_number;
    
    FUNCTION cap_str(
    str varchar2
    )
    return varchar2
    is
        r_str varchar2(50);
    begin
        r_str := upper(substr(str, 1, 1))||lower(substr(str, 2, length(str)-2))||upper(substr(str, -1, 1));
        return r_str;
    end cap_str;
    
    FUNCTION get_date(
    pesel number
    )
    return date
    is
        r_date date;
        r_pesel varchar2(20);
    begin
        r_pesel := to_char(pesel);
        r_pesel := substr(r_pesel, 1,2)||'-'||substr(r_pesel, 3,2)||'-'||substr(r_pesel, 5,2);
        if pesel > 24000000000 then
            r_pesel := '19'||r_pesel;
        else
            r_pesel := '20'||r_pesel;
        end if;
        r_date := to_date(r_pesel,'yyyy-MM-DD');
        return r_date;
    end get_date;
    
    FUNCTION get_data(
    v_country_name varchar2
    )
    return varchar2
    is  
        country number;
        emp_numb number;
        dep_numb number;
    begin
        select count(*) into country from countries where country_name = v_country_name;
        if country = 0 then
            raise NO_DATA_FOUND;
        end if;
        select count(d.department_id) into dep_numb
            from departments d 
            left join locations l on d.location_id = l.location_id 
            left join countries c on c.country_id=l.country_id
            where c.country_name = v_country_name;
        select count(d.department_id) into emp_numb
            from employees e
            left join departments d on e.department_id = d.department_id
            left join locations l on d.location_id = l.location_id 
            left join countries c on c.country_id=l.country_id
            where c.country_name = v_country_name;
        return dep_numb||' i '||emp_numb;
    exception
        when NO_DATA_FOUND then
            DBMS_OUTPUT.PUT_LINE('Brak kraju o takiej nazwie');
    end get_data;
    
    Procedure get_employee_name(employee_idd employees.employee_id%type)  as
        nazw varchar2(50);
    begin
        select first_name||' '||last_name into nazw from employees where employee_id=employee_idd;
        dbms_output.put_line('Pracownik #'||employee_idd||' - '|| nazw);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Błąd przy wyswietlaniu');
    END get_employee_name;
end hr_mgmt;

drop package hr_mgmt;

begin
    DBMS_OUTPUT.PUT_LINE( hr_mgmt.get_job_name('AD_VP'));
    DBMS_OUTPUT.PUT_LINE( hr_mgmt.get_yearly_salary(145));
    DBMS_OUTPUT.PUT_LINE( hr_mgmt.reformat_number('+12111222333'));
    DBMS_OUTPUT.PUT_LINE( hr_mgmt.cap_str('aSDFg'));
    DBMS_OUTPUT.PUT_LINE( to_char(hr_mgmt.get_date(22091804656),'yyyy-mm-dd'));
    DBMS_OUTPUT.PUT_LINE( hr_mgmt.get_data('United States of America'));
    hr_mgmt.get_employee_name(102);
end;

-----------------------------------
Create or replace package region_mgmt as
    Procedure add_regions(region_idd number, region_namee varchar2);
    Procedure mod_regions(region_idd number, region varchar2);
    Procedure del_regions(region_idd number);
    Procedure get_name(region_idd number);
    FUNCTION get_region_name(regionid regions.region_id%TYPE) return varchar2;
end region_mgmt;
CREATE or replace PACKAGE BODY region_mgmt as
    Procedure add_regions(region_idd number, region_namee varchar2) as
    begin
        insert into regions (region_id,region_name) values(region_idd, region_namee);
    EXCEPTION
       WHEN OTHERS THEN
          dbms_output.put_line( SQLERRM );
    END add_regions;
    
    Procedure mod_regions(region_idd number, region varchar2)  as
    begin
        update regions set region_name=region where region_id=region_idd;
        IF SQL%NOTFOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'No Regions updated');
        END IF;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Zmodyfikowano nazwę dla id = ' || region_idd);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('Błąd przy modyfikacji regions');
    END mod_regions;
    
    Procedure del_regions(region_idd number)  as
    exp exception;
    begin
        delete from regions where region_id=region_idd;
        IF SQL%NOTFOUND THEN
            raise exp;
        END IF;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Usunięto region dla id = ' || region_idd);
        EXCEPTION
            WHEN exp THEN
                DBMS_OUTPUT.PUT_LINE('No Regions deleted');
    END del_regions;
    
    Procedure get_name(region_idd number)  as
        nazw Regions.region_name%TYPE;
    begin
        select region_name into nazw from regions where region_id=region_idd;
        dbms_output.put_line('Region #'||region_idd||' - '|| nazw);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Błąd przy wyswietlaniu');
    END get_name;
    
    FUNCTION get_region_name(
        regionid regions.region_id%TYPE
    )
    return varchar2
    is
        v_region_name regions.region_name%TYPE;
    begin
        select region_name into v_region_name from regions where region_id = regionid;
        return v_region_name;
    exception
        when NO_DATA_FOUND then
            DBMS_OUTPUT.PUT_LINE('Brak regionu z danym id');
    end get_region_name;
    
end region_mgmt;

begin
    DBMS_OUTPUT.PUT_LINE( region_mgmt.get_region_name(1));
    region_mgmt.get_name(1);
    region_mgmt.del_regions(9);
end;
